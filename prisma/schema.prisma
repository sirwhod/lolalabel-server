// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["PR", "PS", "PCK"]
}

model Users {
  id                   String                 @id @default(uuid())
  username             String                 @unique
  name                 String
  imgProfile           String
  departament          String
  permission           String
  password             String                 @default(uuid())
  active               Boolean                @default(false)
  Instructions         Instructions[]
  InstructionsValidate InstructionsValidate[]
  Products             Products[]
  ProductsValidated    ProductsValidated[]
  ProductsDisabled     ProductsDisabled[]
  InstructionsDisabled InstructionsDisabled[]
  Log                  Log[]

  @@schema("PR")
}

model Products {
  id                String              @id @default(uuid())
  sku               String
  version           String
  productName       String
  productLine       String
  productImage      String
  composition       String
  compositionINCI   String
  whoCreated        Users               @relation(fields: [authorId], references: [id])
  authorId          String
  creationDate      DateTime
  updatedAt         DateTime            @updatedAt
  isActive          Boolean             @default(false)
  isValidated       Boolean             @default(false)
  qrCodeIsActive    Boolean             @default(false)
  ProductsValidated ProductsValidated[]
  Instructions      Instructions[]
  ProductsDisabled  ProductsDisabled[]
  Stamps            Stamps[]

  @@schema("PR")
}

model Stamps {
  id          String   @id @default(uuid())
  whatProduct Products @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId   String
  nameStamp   String
  image       String
  active      Boolean  @default(false)

  @@schema("PR")
}

model ProductsValidated {
  id              String   @id @default(uuid())
  whatProduct     Products @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId       String
  whoValidated    Users    @relation(fields: [validatorId], references: [id])
  validatorId     String
  validationDate  DateTime
  productAccepted Boolean  @default(false)

  @@schema("PR")
}

model Instructions {
  id                   String                 @id @default(uuid())
  language             String
  whatIAm              String
  modeOfUse            String
  Precaution           String
  whatProduct          Products               @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId            String
  whoCreated           Users                  @relation(fields: [authorId], references: [id])
  authorId             String
  creationDate         DateTime
  updatedAt            DateTime               @updatedAt
  isActive             Boolean                @default(false)
  isValidated          Boolean                @default(false)
  InstructionsValidate InstructionsValidate[]
  InstructionsDisabled InstructionsDisabled[]

  @@schema("PR")
}

model InstructionsValidate {
  id                String       @id @default(uuid())
  whatInstruction   Instructions @relation(fields: [idInstruction], references: [id], onDelete: NoAction, onUpdate: NoAction)
  idInstruction     String
  whoValidated      Users        @relation(fields: [validatorId], references: [id])
  validatorId       String
  validationDate    DateTime
  instructionAccept Boolean

  @@schema("PR")
}

model ProductsDisabled {
  id           String   @id @default(uuid())
  whatProduct  Products @relation(fields: [idProduct], references: [id], onDelete: NoAction, onUpdate: NoAction)
  idProduct    String
  whoDisabled  Users    @relation(fields: [userId], references: [id])
  userId       String
  disabledDate DateTime
  reason       String

  @@schema("PR")
}

model InstructionsDisabled {
  id              String       @id @default(uuid())
  whatInstruction Instructions @relation(fields: [idInstruction], references: [id], onDelete: NoAction, onUpdate: NoAction)
  idInstruction   String
  whoDisabled     Users        @relation(fields: [userId], references: [id])
  userId          String
  disabledDate    DateTime
  reason          String

  @@schema("PR")
}

model Log {
  id                   String   @id @default(uuid())
  action               String
  productOrInstruction Boolean
  itemName             String
  userId               String
  agent                Users    @relation(fields: [userId], references: [id])
  creationDate         DateTime

  @@schema("PR")
}

model LoginEvents {
  id          String   @id @default(uuid())
  name        String
  password    String
  activeData  DateTime
  active      Boolean  @default(false)
  drawn       Boolean  @default(false)
  drawnClient String

  @@schema("PS")
}

model ClientEvents {
  id    String  @id @default(uuid())
  phone String
  name  String
  email String
  event String
  news  Boolean @default(false)

  @@schema("PS")
}

model CK_User {
  USid           String  @id @default(uuid())
  USname         String
  USusername     String  @unique
  USpassword     String
  USregistration String  @unique
  USstatus       Boolean
  USidProfile    String
  USidStore      String

  CK_fill CK_Fill[]

  profile              CK_Profile             @relation(fields: [USidProfile], references: [PRid])
  store                CK_Store               @relation(fields: [USidStore], references: [STid])
  CK_ChecklistStarted  CK_ChecklistStarted[]
  CK_ChecklistFinished CK_ChecklistFinished[]

  @@schema("PCK")
}

model CK_Profile {
  PRid     String  @id @default(uuid())
  PRname   String
  PRstatus Boolean

  CK_User CK_User[]

  @@schema("PCK")
}

model CK_Store {
  STid     String  @id @default(uuid())
  STname   String  @unique
  STstatus Boolean

  CK_User      CK_User[]
  CK_checklist CK_Checklist[]

  @@schema("PCK")
}

model CK_Checklist {
  CLid      String  @id @default(uuid())
  CLname    String
  CLidStore String
  CLstatus  Boolean

  CK_task CK_Task[]

  store              CK_Store             @relation(fields: [CLidStore], references: [STid])
  CK_ChecklistFilled CK_ChecklistFilled[]

  @@schema("PCK")
}

model CK_Task {
  TKid          String  @id @default(uuid())
  TKidChecklist String
  TKname        String
  TKdescription String
  TKstatus      Boolean

  CK_fill CK_Fill[]

  checklist CK_Checklist @relation(fields: [TKidChecklist], references: [CLid])

  @@schema("PCK")
}

model CK_Fill {
  FLid                String    @id @default(uuid())
  FLidTask            String
  FLfilledAt          DateTime?
  FLresponse          String?
  FLcomment           String?
  FLidUser            String
  FLidChecklistFilled String

  task            CK_Task            @relation(fields: [FLidTask], references: [TKid])
  user            CK_User            @relation(fields: [FLidUser], references: [USid])
  checklistFilled CK_ChecklistFilled @relation(fields: [FLidChecklistFilled], references: [CFLid])

  @@schema("PCK")
}

model CK_ChecklistFilled {
  CFLid          String   @id @default(uuid())
  CFLidChecklist String
  CFLStarted     Boolean  @default(false)
  CFLFinished    Boolean  @default(false)
  CFLcreatedAt   DateTime

  checklist CK_Checklist @relation(fields: [CFLidChecklist], references: [CLid])

  CK_Fill              CK_Fill[]
  CK_ChecklistStarted  CK_ChecklistStarted[]
  CK_ChecklistFinished CK_ChecklistFinished[]

  @@schema("PCK")
}

model CK_ChecklistStarted {
  CSid                String   @id @default(uuid())
  CSidUserStarted     String
  CSstartedAt         DateTime
  CSidChecklistFilled String

  user            CK_User            @relation(fields: [CSidUserStarted], references: [USid])
  checklistFilled CK_ChecklistFilled @relation(fields: [CSidChecklistFilled], references: [CFLid])

  @@schema("PCK")
}

model CK_ChecklistFinished {
  CFid                String   @id @default(uuid())
  CFidUserFinished    String
  CFfinishedAt        DateTime
  CFidChecklistFilled String

  user            CK_User            @relation(fields: [CFidUserFinished], references: [USid])
  checklistFilled CK_ChecklistFilled @relation(fields: [CFidChecklistFilled], references: [CFLid])

  @@schema("PCK")
}
